import streamlit as st
from loguru import logger
import os

st.set_page_config(page_title = "MedBro", page_icon="üë®üèª‚Äç‚öïÔ∏è")
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º loguru
logger.add("log/st.log", format="{time} {level} {message}", level="DEBUG", rotation="100 KB", compression="zip")

st.title(" ‚Äçüî¨  –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤")
st.sidebar.success(" ‚¨ÜÔ∏è    –£–∑–Ω–∞–π—Ç–µ –æ –ø—Ä–æ–µ–∫—Ç–µ —á—É—Ç—å –±–æ–ª—å—à–µ ")

uploaded_file = st.sidebar.file_uploader("üëá  –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π PDF-—Ñ–∞–π–ª", type="pdf")

# –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω
if uploaded_file is not None:
    file_path = os.path.join("pdf/new", uploaded_file.name)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF –≤ –ø–∞–ø–∫—É
    with open(file_path, "wb") as f:
        f.write(uploaded_file.getbuffer())

    st.sidebar.success(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {uploaded_file.name}")

# –ü–æ–ª–µ –≤–≤–æ–¥–∞
question_input = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", key="input_text_field")
response_area = st.empty()

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –≤–≤–µ–ª
if question_input:
    logger.debug(f'question_input={question_input}')

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ
    st.chat_message("user").markdown(question_input)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    with st.chat_message("assistant"):
        response_placeholder = st.empty()
        response_placeholder.markdown("_–ò–∑—É—á–∞—é –∫–Ω–∏–≥–∏..._")

    import main as sr

    @st.cache_data
    def load_all():
        db = sr.indexed_df()
        logger.debug('–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
        return db


    db = load_all()

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–∑–æ–≤–∞ RAG
    inputs = {"question": question_input, "max_retries": 3}

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ RAG –ø–æ stream
    for event in sr.graph.stream(inputs, stream_mode="values"):
        logger.debug(event)
        if "generation" in event and hasattr(event["generation"], "content"):
            model_response = event["generation"].content
            response_placeholder.markdown(f"**–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:** {model_response}")
            break

    # –ö–Ω–æ–ø–∫–∏ –ª–∞–π–∫–∞/–¥–∏–∑–ª–∞–π–∫–∞ –ø–æ–¥ –æ—Ç–≤–µ—Ç–æ–º
    # col1, col2 = st.columns([1, 1])
    # with col1:
    #     if st.button("üëç", key="like_button"):
    #         logger.debug("–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–∏–ª –ª–∞–π–∫!")
    #         st.success("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ë—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–ª—å—à–µ.")
    # with col2:
    #     if st.button("üëé", key="dislike_button"):
    #         logger.debug("–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–∏–ª –¥–∏–∑–ª–∞–π–∫!")
    #         st.warning("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º.")

st.sidebar.image("pages/pok√©mon-turtwig-turtwig.gif")